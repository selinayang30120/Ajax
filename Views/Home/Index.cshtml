@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>
<ul id="ul1">
</ul>

@section Scripts{
    <script src="~/js/travel.js"></script>
 <script>
     console.log(spots.CommonFormat.Section);
 </script>

    <script>
        const theUl = document.querySelector('#ul1');

        const emps = [{ "name": "Tom", "workYears": 3, "salary": 35000 },
        { "name": "Jack", "workYears": 5, "salary": 40000 },
        { "name": "Mary", "workYears": 7, "salary": 45000 }];

        const htmlEmps = emps.map((emp) => {
            const { name, workYears, salary } = emp;
            return (
                `<li>${name},${workYears},${salary}</li>`
            )
        })

        theUl.innerHTML = htmlEmps.join("");
                 //console.log(htmlEmps);
                 //console.log(htmlEmps.join(""));


                //JSON資料的讀取
                // for (let i = 0, max = emps.length; i < max; i++) {
                //     console.log(emps[i].name);
                //     console.log(emps[i].workYears);
                //     console.log(emps[i].salary);
                // }

                array.方法()
                const docfrag = document.createdocumentfragment();
                emps.foreach((emp) => {
                     console.log(emp.name);
                     console.log(emp.workyears);
                     console.log(emp.salary);
                    emp.name + "," + emp.workyears + "," + emp.salary
                    const eleli = document.createelement("li"); //<li>
                    const txtli = document.createtextnode(`${emp.name},${emp.workyears},${emp.salary}`); //tom,3,35000
                    eleli.appendchild(txtli); //<li>tom,3,35000</li>
                    //先加到空的容器中
                    docfrag.appendchild(eleli); //<ul><li>tom,3,35000</li></ul>

                })
                theul.appendchild(docfrag); //這時候才將資料顯示到網頁上



                // console.log(emps[1]); //{ "name": "Tom", "workYears": 3, "salary": 35000 }
                // console.log(emps[1].workYears);  //Tom



                //[] or {}
                // const datas = ["a", "b", "c"];
                // console.log(datas[0]);  //a
                // console.log(datas[1]);  //b
                // console.log(datas[2]);  //c

                // const user = { "name": "Tom", "age": 30 };
                // console.log(user.name); //Tom
                // console.log(user.age); //30







                // //建立Promise
                // function show(data){
                //     const promise = new Promise((resolve, reject) => {
                //         setTimeout(() => { resolve(data) },1000)
                //     });
                //     return promise;
                // }

                // //async await => 用同步的程式語法結構來完成非同步的效果
                // //IIFE
                // (async () => {
                //     let data = await show("A");
                //     console.log(data);
                //     data = await show("B");
                //     console.log(data);
                //     data = await show("C");
                //     console.log(data);
                // })();



                //使用Promise
               // console.log(show("A"));
                // show("A")
                //     .then((data) => {
                //         console.log(data)
                //         return show("B")
                //     })
                //     .then((data) => {
                //         console.log(data)
                //         return show("C")
                //     })
                //     .then((data) => {
                //         console.log(data)
                //     });

                // setTimeout(function () {
                //     console.log('A');
                //     setTimeout(function () {
                //         console.log('B');
                //         setTimeout(function () {
                //             console.log('C');
                //         }, 1000);
                //     }, 1000);
                // }, 1000);


              // //建立一個Promise物件
              //   const promise = new Promise((resolve,reject) => {
              //      //非同步程式碼
              //       const num = Math.random() > 0.5 ? 1 : 0;

              //       if (num) {
              //           resolve("成功 > 0.5");
              //       } else {
              //           reject("失敗 < 0.5")
              //       }


              //   });

              //   //使用 Promise
              //   promise
              //       .then((data) => {
              //           console.log(data);
              //       })
              //       .catch((err) => {
              //           console.log(err);
              //       })
              //       .finally(() => {
              //           console.log("END");
              //       })



                // setTimeout(function () {
                //     console.log('A');
                // }, 1000);
                // setTimeout(function () {
                //     console.log('B');
                // }, 1000);
                // setTimeout(function () {
                //     console.log('C');
                // }, 1000);

                // setTimeout(function () {
                //     console.log('A');
                // }, 3000);
                // setTimeout(function () {
                //     console.log('B');
                // }, 2000);
                // setTimeout(function () {
                //     console.log('C');
                // }, 1000);







    </script>
}
